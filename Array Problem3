Question Link : "https://www.geeksforgeeks.org/problems/majority-element-1587115620/1?page=1&category=Arrays&difficulty=Medium&sortBy=submissions"

// Question statement is :

Majority Element

Given an array A of N elements. Find the majority element in the array.
A majority element in an array A of size N is an element that appears strictly more than N/2 times in the array.
 
Example 1:
Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.

Example 2:
Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.

Your Task:
The task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.
 
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ N ≤ 107
0 ≤ Ai ≤ 106


// My Code and Approach is :

class Solution{
  public:
     
    int majorityElement(int a[], int size)
    {

        // we will take map it's store unique value. we will store count in this.
        map<int,int>mp;

        for(int i=0;i<size;i++){
            mp[a[i]]++;
        }

        // here we have all value count in map After end of first loop.

        // Now we will iterate in map and will check which value greater than size/2 and return that value.
        for(auto it=mp.begin();it!=mp.end();it++){
            if(it->second>size/2){
                return it->first;
            }
        }
        
        // after match if we can't find any element count is greater than n/2 then it will return -1.
        return -1;
    }
};
