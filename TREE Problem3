Question Link : "https://leetcode.com/problems/invert-binary-tree/"

Question is : Invert Binary Tree.

Given the root of a binary tree, invert the tree, and return its root.
Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []

// My Approach and CODE

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {

        // first we will take stack and push root.
        stack<TreeNode*>st;
        st.push(root);

        while(!st.empty()){
            if(root==NULL){
                return NULL;
            }

            // here we will make curr and will traverse from this to left and right.
            TreeNode*curr=st.top();
            st.pop();

            // it is for swap. 
            TreeNode*temp=curr->left;
            curr->left=curr->right;
            curr->right=temp;

            // it is for store address of left if left is present.
            if(curr->left){
                st.push(curr->left);
            }

            // it is for store address of right if right is present
            if(curr->right){
                st.push(curr->right);
            }
        }
        // After end of loop. we will have invert tree.
        return root;
    }
};
